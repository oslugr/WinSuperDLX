/* 
Este fichero es parte de WinSuperDLX, el simulador interactivo de la
    m치quina DLX 

    Copyright (C) 2002 Mario David Barrag치n Garc칤a (jabade@supercable.com)
                 Antonio Jes칰s Contreras S치nchez   (anjeconsa@yahoo.es)
                Emilio Jos칠 Garnica L칩pez   (ejgl@hotmail.com)
                Julio Ortega Lopera         (julio@atc.ugr.es)

    Este programa es software libre: usted puede redistribuirlo y/o modificarlo 
    bajo los t칠rminos de la Licencia P칰blica General GNU publicada 
    por la Fundaci칩n para el Software Libre, ya sea la versi칩n 3 
    de la Licencia, o (a su elecci칩n) cualquier versi칩n posterior.

    Este programa se distribuye con la esperanza de que sea 칰til, pero 
    SIN GARANT칈A ALGUNA; ni siquiera la garant칤a impl칤cita 
    MERCANTIL o de APTITUD PARA UN PROP칍SITO DETERMINADO. 
    Consulte los detalles de la Licencia P칰blica General GNU para obtener 
    una informaci칩n m치s detallada. 

    Deber칤a haber recibido una copia de la Licencia P칰blica General GNU 
    junto a este programa. 
    En caso contrario, consulte <http://www.gnu.org/licenses/>.

*/
//---------------------------------------------------------------------------
#include <vcl.h>
#pragma hdrstop

#include "Legend.h"
#include "Unit1.h"
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TFormLegend *FormLegend;
//---------------------------------------------------------------------------
__fastcall TFormLegend::TFormLegend(TComponent* Owner)
        : TForm(Owner)
{
}
//---------------------------------------------------------------------------

void __fastcall TFormLegend::BtnAceptarClick(TObject *Sender)
{
        Close();        
}
//---------------------------------------------------------------------------
void __fastcall TFormLegend::FormPaint(TObject *Sender)
{
   // Se tienen que dibujar los rect烱gulos de los distintos colores.

   long izq;
   long menos, mas;

   izq = LblCaptacion->Left;
   menos = 5;
   mas = 15;

   // Color de captaci蚤
   this->Canvas->Brush->Color = FormPrincipal->coloresHistoria[0];
   this->Canvas->Rectangle(izq-30,LblCaptacion->Top-menos,izq-10,LblCaptacion->Top+mas);
   // Color de decodificaci蚤
   this->Canvas->Brush->Color = FormPrincipal->coloresHistoria[1];
   this->Canvas->Rectangle(izq-30,LblDecodificacion->Top-menos,izq-10,LblDecodificacion->Top+mas);
   // Color de ejecuci蚤
   this->Canvas->Brush->Color = FormPrincipal->coloresHistoria[2];
   this->Canvas->Rectangle(izq-30,LblEjecucion->Top-menos,izq-10,LblEjecucion->Top+mas);
   // Color de WB
   this->Canvas->Brush->Color = FormPrincipal->coloresHistoria[3];
   this->Canvas->Rectangle(izq-30,LblWB->Top-menos,izq-10,LblWB->Top+mas);
   // Color de retirada para enteros
   this->Canvas->Brush->Color = FormPrincipal->coloresHistoria[5];
   this->Canvas->Rectangle(izq-30,LblRetiradaROBI->Top-menos,izq-10,LblRetiradaROBI->Top+mas);
   // Color de retirada para floats
   this->Canvas->Brush->Color = FormPrincipal->coloresHistoria[6];
   this->Canvas->Rectangle(izq-30,LblRetiradaROBF->Top-menos,izq-10,LblRetiradaROBF->Top+mas);
   // "x" para los ciclos de espera
   this->Canvas->Brush->Color = clBlack;
   this->Canvas->MoveTo(izq-30,LblEsperando->Top - menos);
   this->Canvas->LineTo(izq-10,LblEsperando->Top + mas);
   this->Canvas->MoveTo(izq-30,LblEsperando->Top + mas);
   this->Canvas->LineTo(izq-10,LblEsperando->Top - menos);
   // Color de instrucci蚤 retirada (antes de que termine su ejecuci蚤
   this->Canvas->Brush->Color = clRed;
   this->Canvas->Ellipse(izq-30,LblEliminadaCauce->Top-menos,izq-10,LblEliminadaCauce->Top+mas);
}
//---------------------------------------------------------------------------

